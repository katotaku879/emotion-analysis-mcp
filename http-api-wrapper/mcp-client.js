"use strict";
// DockerÁí∞Â¢ÉÁî® - ÂÆüÈöõ„ÅÆÂàÜÊûê„ÉÑ„Éº„É´„Çí‰ΩøÁî®
const { analyzeCauseTool } = require('../mcp-server/src/tools/analyze_cause.js');

// Êñ∞„Åó„ÅÑÂàÜÊûê„ÉÑ„Éº„É´„Çí„Ç§„É≥„Éù„Éº„Éà
let analyzeEmotionPatternsTool, analyzeSleepPatternsTool, analyzeFatiguePatternsTool, analyzeCognitivePatternsTool;

try {
    analyzeEmotionPatternsTool = require('../mcp-server/dist/tools/analyze_emotion_patterns.js').analyzeEmotionPatternsTool;
    analyzeSleepPatternsTool = require('../mcp-server/dist/tools/analyze_sleep_patterns.js').analyzeSleepPatternsTool;
    analyzeFatiguePatternsTool = require('../app/tools/analyze_fatigue_patterns_fixed.js').analyzeFatiguePatternsTool;
    analyzeCognitivePatternsTool = require('../mcp-server/dist/tools/analyze_cognitive_patterns.js').analyzeCognitivePatternsTool;
    console.log('‚úÖ All analysis tools loaded successfully');
} catch (error) {
    console.log('‚ö†Ô∏è Some analysis tools not available:', error.message);
}

class MCPClient {
    constructor(mcpServerPath) {
        // DockerÁí∞Â¢É„Åß„ÅØÂ§ñÈÉ®MCP„Çµ„Éº„Éê„Éº„Çí‰Ωø„Çè„Å™„ÅÑ
        this.mcpServerUrl = mcpServerPath ||
            process.env.MCP_SERVER_URL ||
            'http://host.docker.internal:3001';
        console.log('üì° MCP Client initialized (Docker mode - using actual analysis tools)');
    }
    
    async callTool(toolName, params) {
        // Â§ñÈÉ®MCP„Çµ„Éº„Éê„Éº„ÇíÂëº„Å∞„Åö„Å´„ÄÅÁõ¥Êé•analyze_cause„Çí‰ΩøÁî®
        return this.call(toolName, params);
    }
    
    async call(toolName, params) {
        try {
            const context = params.focus || params.context;
            console.log(`üìä Processing ${toolName} with context: ${context}`);
            
            let result;
            
            // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âøú„Åò„Å¶ÂÆüÈöõ„ÅÆ„ÉÑ„Éº„É´„Çí‰ΩøÁî®
            if (context === 'emotional' && analyzeEmotionPatternsTool) {
                console.log('üß† Using actual analyze_emotion_patterns tool');
                result = await analyzeEmotionPatternsTool.handler({
                    timeframe: params.timeframe || 30,
                    focus: 'all'
                });
                // „Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÇíËøΩÂä†
                if (result.summary && !result.summary.includes('„ÄêÊÑüÊÉÖÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêÊÑüÊÉÖÂàÜÊûê„Äë${result.summary}`;
                }
                return result;
                
            } else if (context === 'sleep' && analyzeSleepPatternsTool) {
                console.log('üò¥ Using actual analyze_sleep_patterns tool');
                result = await analyzeSleepPatternsTool.handler({
                    timeframe: params.timeframe || 30
                });
                // „Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÇíËøΩÂä†
                if (result.summary && !result.summary.includes('„ÄêÁù°Áú†ÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêÁù°Áú†ÂàÜÊûê„Äë${result.summary}`;
                }
                return result;
                
            } else if (context === 'fatigue' && analyzeFatiguePatternsTool) {
                console.log('üò´ Using actual analyze_fatigue_patterns tool');
                result = await analyzeFatiguePatternsTool.handler({
                    timeframe: params.timeframe || 30
                });
                // „Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÇíËøΩÂä†
                if (result.summary && !result.summary.includes('„ÄêÁñ≤Âä¥ÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêÁñ≤Âä¥ÂàÜÊûê„Äë${result.summary}`;
                }
                return result;
                
            } else if (context === 'cognitive' && analyzeCognitivePatternsTool) {
                console.log('üéØ Using actual analyze_cognitive_patterns tool');
                result = await analyzeCognitivePatternsTool.handler({
                    timeframe: params.timeframe || 30
                });
                // „Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÇíËøΩÂä†
                if (result.summary && !result.summary.includes('„ÄêË™çÁü•Ê©üËÉΩÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêË™çÁü•Ê©üËÉΩÂàÜÊûê„Äë${result.summary}`;
                }
                return result;
            }
            
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Êñ∞„Åó„ÅÑ„ÉÑ„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ analyze_cause „Çí‰ΩøÁî®
            console.log('üìä Fallback to analyze_cause with context-specific prompt');
            
            let question = params.message || params.question;
            
            // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âøú„Åò„Å¶„Éó„É≠„É≥„Éó„Éà„ÇíË™øÊï¥
            if (context === 'emotional') {
                question = params.message + ' ÁßÅ„ÅÆÈÅéÂéª„ÅÆ„Éá„Éº„Çø„Åã„Çâ„ÄÅ„Çπ„Éà„É¨„Çπ„ÄÅ„Ç§„É©„Ç§„É©„ÄÅ‰∏çÂÆâ„ÄÅÁÑ¶„Çä„ÄÅÊÄí„Çä„Å™„Å©„ÅÆÊÑüÊÉÖÁöÑ„Å™Ë¶ÅÂõ†„ÇíÈáçÁÇπÁöÑ„Å´ÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÁâπ„Å´„Äå„Ç§„É©„Ç§„É©„Äç„Äå„Çπ„Éà„É¨„Çπ„Äç„Äå„É†„Ç´„Å§„Åè„Äç„ÄåËÖπÁ´ã„Å§„Äç„Å™„Å©„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Å´Ê≥®ÁõÆ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            } else if (context === 'sleep') {
                question = params.message + ' ÁßÅ„ÅÆÈÅéÂéª„ÅÆ„Éá„Éº„Çø„Åã„Çâ„ÄÅÁù°Áú†„Éë„Çø„Éº„É≥„ÄÅ‰∏çÁú†„ÄÅÂ§úÂã§„ÄÅÊ∑±Â§ú„ÅÆÊ¥ªÂãï„ÄÅ„ÄåÁú†„Çå„Å™„ÅÑ„Äç„ÄåÂØù„Çå„Å™„ÅÑ„Äç„ÄåÁù°Áú†‰∏çË∂≥„Äç„Å™„Å©„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÈáçÁÇπÁöÑ„Å´ÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÁâπ„Å´Â∞±ÂØùÊôÇÈñì„Å®Ëµ∑Â∫äÊôÇÈñì„ÅÆ„Éë„Çø„Éº„É≥„Å´Ê≥®ÁõÆ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            } else if (context === 'fatigue') {
                question = params.message + ' ÁßÅ„ÅÆÈÅéÂéª„ÅÆ„Éá„Éº„Çø„Åã„Çâ„ÄÅË∫´‰ΩìÁöÑÁñ≤Âä¥„Å®Á≤æÁ•ûÁöÑÁñ≤Âä¥„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„ÄåÁñ≤„Çå„Åü„Äç„Äå„Å†„Çã„ÅÑ„Äç„Äå„Åó„Çì„Å©„ÅÑ„Äç„Äå‰ΩìË™ø‰∏çËâØ„Äç„ÄåÈ†≠Áóõ„Äç„Å™„Å©„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Å®„ÄÅ„Åù„ÅÆÈ†ªÂ∫¶„ÇÑÊôÇÈñìÂ∏Ø„ÇíÈáçÁÇπÁöÑ„Å´Ë¶ã„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            } else if (context === 'cognitive') {
                question = params.message + ' ÁßÅ„ÅÆÈÅéÂéª„ÅÆ„Éá„Éº„Çø„Åã„Çâ„ÄÅÈõÜ‰∏≠Âäõ„ÄÅË®òÊÜ∂Âäõ„ÄÅÂà§Êñ≠Âäõ„Å´Èñ¢„Åô„ÇãÂïèÈ°å„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„ÄåÈõÜ‰∏≠„Åß„Åç„Å™„ÅÑ„Äç„Äå„Éü„Çπ„Äç„ÄåÂøò„Çå„Åü„Äç„ÄåÈ†≠„ÅåÂõû„Çâ„Å™„ÅÑ„Äç„Å™„Å©„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Å®„ÄÅ‰ΩúÊ•≠ÂäπÁéá„ÅÆÂ§âÂåñ„ÇíÈáçÁÇπÁöÑ„Å´Ë¶ã„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            }
            
            // analyze_cause„ÇíÁõ¥Êé•Âëº„Å≥Âá∫„Åó
            result = await analyzeCauseTool.handler({
                question: question,
                timeframe: params.timeframe || 30,
                useCache: false,  // „Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°Âäπ„Å´„Åó„Å¶ÊúÄÊñ∞„Éá„Éº„Çø„ÇíÂèñÂæó
                securityLevel: params.securityLevel || 'medium'
            });
            
            // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âøú„Åò„Å¶„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÇíËøΩÂä†ÔºàÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„Çí‰ΩøÁî®Ôºâ
            if (context === 'emotional') {
                if (result.summary && !result.summary.includes('„ÄêÊÑüÊÉÖÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêÊÑüÊÉÖÂàÜÊûê„Äë${result.summary}`;
                }
            } else if (context === 'sleep') {
                if (result.summary && !result.summary.includes('„ÄêÁù°Áú†ÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêÁù°Áú†ÂàÜÊûê„Äë${result.summary}`;
                }
            } else if (context === 'fatigue') {
                if (result.summary && !result.summary.includes('„ÄêÁñ≤Âä¥ÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêÁñ≤Âä¥ÂàÜÊûê„Äë${result.summary}`;
                }
            } else if (context === 'cognitive') {
                if (result.summary && !result.summary.includes('„ÄêË™çÁü•Ê©üËÉΩÂàÜÊûê„Äë')) {
                    result.summary = `„ÄêË™çÁü•Ê©üËÉΩÂàÜÊûê„Äë${result.summary}`;
                }
            }
            
            // probable_causes„Åå„ÅÇ„Çå„Å∞findings„Å´Â§âÊèõ
            if (result.probable_causes && result.probable_causes.length > 0) {
                result.findings = result.probable_causes.map(c => 
                    `${c.cause}ÔºàÁ¢∫‰ø°Â∫¶: ${Math.round(c.confidence * 100)}%Ôºâ`
                );
            }
            
            console.log('‚úÖ Analysis completed successfully');
            console.log(`   Context: ${context || 'general'}`);
            console.log(`   Tool used: ${analyzeEmotionPatternsTool && context === 'emotional' ? 'analyze_emotion_patterns' : 'analyze_cause'}`);
            console.log(`   Findings: ${result.findings ? result.findings.length : 0} items`);
            console.log(`   Data points: ${result.metadata?.dataPoints || result.data_points || 'N/A'}`);
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Analysis failed:', error.message);
            throw error;
        }
    }
    
    async getServerStatus() {
        return {
            running: true,
            databaseConnected: true,
            lastAnalysis: new Date().toISOString(),
            uptime: process.uptime()
        };
    }
    
    async clearAnalysisCache() {
        return { clearedCount: 0 };
    }
    
    async getAnalysisHistory(params) {
        return { items: [], total: 0 };
    }
}

// CommonJSÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
exports.MCPClient = MCPClient;
module.exports = { MCPClient };